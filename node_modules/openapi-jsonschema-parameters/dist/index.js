"use strict";
exports.__esModule = true;
function convertParametersToJSONSchema(parameters) {
    var parametersSchema = {};
    var bodySchema = getBodySchema(parameters);
    var formDataSchema = getSchema(parameters, 'formData');
    var headerSchema = getSchema(parameters, 'header');
    var pathSchema = getSchema(parameters, 'path');
    var querySchema = getSchema(parameters, 'query');
    if (bodySchema) {
        parametersSchema.body = bodySchema;
    }
    if (formDataSchema) {
        parametersSchema.formData = formDataSchema;
    }
    if (headerSchema) {
        parametersSchema.headers = headerSchema;
    }
    if (pathSchema) {
        parametersSchema.path = pathSchema;
    }
    if (querySchema) {
        parametersSchema.query = querySchema;
    }
    return parametersSchema;
}
exports.convertParametersToJSONSchema = convertParametersToJSONSchema;
var VALIDATION_KEYWORDS = [
    'additionalItems',
    'default',
    'example',
    'description',
    'enum',
    'exclusiveMaximum',
    'exclusiveMinimum',
    'format',
    'items',
    'maxItems',
    'maxLength',
    'maximum',
    'minItems',
    'minLength',
    'minimum',
    'multipleOf',
    'pattern',
    'title',
    'type',
    'uniqueItems'
];
function copyValidationKeywords(src) {
    var dst = {};
    for (var i = 0, keys = Object.keys(src), len = keys.length; i < len; i++) {
        var keyword = keys[i];
        if (VALIDATION_KEYWORDS.indexOf(keyword) > -1 ||
            keyword.slice(0, 2) === 'x-') {
            dst[keyword] = src[keyword];
        }
    }
    return dst;
}
function handleNullable(params, paramSchema, param) {
    if (params.nullable) {
        if (param.hasOwnProperty('examples')) {
            paramSchema.examples = param.examples;
        }
        return {
            anyOf: [paramSchema, { type: 'null' }]
        };
    }
    if (param.hasOwnProperty('examples')) {
        paramSchema.examples = param.examples;
    }
    return paramSchema;
}
function getBodySchema(parameters) {
    var bodySchema = parameters.filter(function (param) {
        return param["in"] === 'body' && param.schema;
    })[0];
    if (bodySchema) {
        bodySchema = bodySchema.schema;
    }
    return bodySchema;
}
function getSchema(parameters, type) {
    var params = parameters.filter(byIn(type));
    var schema;
    if (params.length) {
        schema = { properties: {} };
        params.forEach(function (param) {
            var paramSchema = copyValidationKeywords(param.schema || param);
            schema.properties[param.name] = handleNullable(param.schema || param, paramSchema, param);
        });
        schema.required = getRequiredParams(params);
    }
    return schema;
}
function getRequiredParams(parameters) {
    return parameters.filter(byRequired).map(toName);
}
function byIn(str) {
    return function (param) { return param["in"] === str && param.type !== 'file'; };
}
function byRequired(param) {
    return !!param.required;
}
function toName(param) {
    return param.name;
}
//# sourceMappingURL=index.js.map